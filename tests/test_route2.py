import json


def test_route1(app, client):
    #Test whether route2 can correctly merge, de-duplicate, and sort
    #in the case of multiple tags
    res = client.get('http://localhost:5000/api/posts?tags=design,science&sortBy=reads&direction=desc')
    assert res.status_code == 200
    expected = {"posts": [{"author": "Lainey Ritter", "authorId": 1, "id": 96, "likes": 395, "popularity": 0.44, "reads": 99575, "tags": ["science", "history"]}, {"author": "Jaden Bryant", "authorId": 3, "id": 51, "likes": 487, "popularity": 0.01, "reads": 98798, "tags": ["design", "startups", "tech"]}, {"author": "Elisha Friedman", "authorId": 8, "id": 56, "likes": 319, "popularity": 0.49, "reads": 96864, "tags": ["design", "health", "culture"]}, {"author": "Ahmad Dunn", "authorId": 7, "id": 7, "likes": 499, "popularity": 0.93, "reads": 95434, "tags": ["science", "health"]}, {"author": "Kinley Crosby", "authorId": 10, "id": 75, "likes": 733, "popularity": 0.98, "reads": 94910, "tags": ["science", "design", "culture"]}, {"author": "Rylee Paul", "authorId": 9, "id": 40, "likes": 968, "popularity": 0.54, "reads": 90784, "tags": ["culture", "science"]}, {"author": "Zackery Turner", "authorId": 12, "id": 91, "likes": 455, "popularity": 0.19, "reads": 90395, "tags": ["science", "health"]}, {"author": "Ahmad Dunn", "authorId": 7, "id": 100, "likes": 573, "popularity": 0.43, "reads": 89894, "tags": ["science", "design", "history"]}, {"author": "Ahmad Dunn", "authorId": 7, "id": 28, "likes": 713, "popularity": 0.8, "reads": 89173, "tags": ["design"]}, {"author": "Lainey Ritter", "authorId": 1, "id": 21, "likes": 406, "popularity": 0.81, "reads": 88797, "tags": ["science", "startups"]}, {"author": "Jon Abbott", "authorId": 4, "id": 62, "likes": 135, "popularity": 0.83, "reads": 87712, "tags": ["culture", "science"]}, {"author": "Jon Abbott", "authorId": 4, "id": 43, "likes": 149, "popularity": 0.07, "reads": 77776, "tags": ["science", "tech"]}, {"author": "Elisha Friedman", "authorId": 8, "id": 52, "likes": 602, "popularity": 0.26, "reads": 76359, "tags": ["science", "health"]}, {"author": "Adalyn Blevins", "authorId": 11, "id": 16, "likes": 749, "popularity": 0.29, "reads": 71754, "tags": ["design", "history"]}, {"author": "Rylee Paul", "authorId": 9, "id": 36, "likes": 709, "popularity": 0.08, "reads": 65277, "tags": ["health", "design"]}, {"author": "Elisha Friedman", "authorId": 8, "id": 13, "likes": 230, "popularity": 0.31, "reads": 64058, "tags": ["design", "tech"]}, {"author": "Ahmad Dunn", "authorId": 7, "id": 45, "likes": 31, "popularity": 0.89, "reads": 63432, "tags": ["science", "history"]}, {"author": "Jon Abbott", "authorId": 4, "id": 87, "likes": 619, "popularity": 0.66, "reads": 61622, "tags": ["culture", "startups", "science"]}, {"author": "Zackery Turner", "authorId": 12, "id": 63, "likes": 682, "popularity": 0.62, "reads": 54374, "tags": ["culture", "design"]}, {"author": "Rylee Paul", "authorId": 9, "id": 17, "likes": 527, "popularity": 0.88, "reads": 52454, "tags": ["science", "health"]}, {"author": "Trevon Rodriguez", "authorId": 5, "id": 74, "likes": 660, "popularity": 0.95, "reads": 51324, "tags": ["science"]}, {"author": "Zackery Turner", "authorId": 12, "id": 6, "likes": 387, "popularity": 0.83, "reads": 50062, "tags": ["science", "startups"]}, {"author": "Rylee Paul", "authorId": 9, "id": 41, "likes": 715, "popularity": 0.69, "reads": 47876, "tags": ["design", "health"]}, {"author": "Lainey Ritter", "authorId": 1, "id": 97, "likes": 382, "popularity": 0.83, "reads": 47484, "tags": ["politics", "science", "design", "culture"]}, {"author": "Tia Roberson", "authorId": 2, "id": 38, "likes": 105, "popularity": 0.45, "reads": 45896, "tags": ["design", "history"]}, {"author": "Bryson Bowers", "authorId": 6, "id": 42, "likes": 452, "popularity": 0.08, "reads": 39721, "tags": ["design"]}, {"author": "Elisha Friedman", "authorId": 8, "id": 10, "likes": 853, "popularity": 0.6, "reads": 35913, "tags": ["science", "health", "history"]}, {"author": "Lainey Ritter", "authorId": 1, "id": 33, "likes": 289, "popularity": 0.73, "reads": 31629, "tags": ["science"]}, {"author": "Bryson Bowers", "authorId": 6, "id": 81, "likes": 552, "popularity": 0.09, "reads": 22975, "tags": ["design", "history"]}, {"author": "Kinley Crosby", "authorId": 10, "id": 88, "likes": 371, "popularity": 0.35, "reads": 21916, "tags": ["culture", "science", "history"]}, {"author": "Elisha Friedman", "authorId": 8, "id": 4, "likes": 728, "popularity": 0.88, "reads": 19645, "tags": ["science", "design", "tech"]}, {"author": "Trevon Rodriguez", "authorId": 5, "id": 58, "likes": 466, "popularity": 0.1, "reads": 17389, "tags": ["science", "tech"]}, {"author": "Tia Roberson", "authorId": 2, "id": 98, "likes": 934, "popularity": 0.5, "reads": 17307, "tags": ["design"]}, {"author": "Rylee Paul", "authorId": 9, "id": 73, "likes": 315, "popularity": 0.13, "reads": 8966, "tags": ["design"]}, {"author": "Ahmad Dunn", "authorId": 7, "id": 11, "likes": 750, "popularity": 0.54, "reads": 6183, "tags": ["science", "design"]}, {"author": "Adalyn Blevins", "authorId": 11, "id": 69, "likes": 425, "popularity": 0.56, "reads": 5149, "tags": ["science", "history"]}, {"author": "Elisha Friedman", "authorId": 8, "id": 19, "likes": 779, "popularity": 0.91, "reads": 3041, "tags": ["science"]}, {"author": "Trevon Rodriguez", "authorId": 5, "id": 77, "likes": 407, "popularity": 0.21, "reads": 664, "tags": ["politics", "startups", "tech", "science"]}]}
    assert expected == json.loads(res.get_data(as_text=True))

    #Test whether the cache will overwrite the data incorrectly
    res = client.get('http://localhost:5000/api/posts?tags=design&sortBy=id')
    assert res.status_code == 200
    expected = {"posts": [{"author": "Elisha Friedman", "authorId": 8, "id": 4, "likes": 728, "popularity": 0.88, "reads": 19645, "tags": ["science", "design", "tech"]}, {"author": "Ahmad Dunn", "authorId": 7, "id": 11, "likes": 750, "popularity": 0.54, "reads": 6183, "tags": ["science", "design"]}, {"author": "Elisha Friedman", "authorId": 8, "id": 13, "likes": 230, "popularity": 0.31, "reads": 64058, "tags": ["design", "tech"]}, {"author": "Adalyn Blevins", "authorId": 11, "id": 16, "likes": 749, "popularity": 0.29, "reads": 71754, "tags": ["design", "history"]}, {"author": "Ahmad Dunn", "authorId": 7, "id": 28, "likes": 713, "popularity": 0.8, "reads": 89173, "tags": ["design"]}, {"author": "Rylee Paul", "authorId": 9, "id": 36, "likes": 709, "popularity": 0.08, "reads": 65277, "tags": ["health", "design"]}, {"author": "Tia Roberson", "authorId": 2, "id": 38, "likes": 105, "popularity": 0.45, "reads": 45896, "tags": ["design", "history"]}, {"author": "Rylee Paul", "authorId": 9, "id": 41, "likes": 715, "popularity": 0.69, "reads": 47876, "tags": ["design", "health"]}, {"author": "Bryson Bowers", "authorId": 6, "id": 42, "likes": 452, "popularity": 0.08, "reads": 39721, "tags": ["design"]}, {"author": "Jaden Bryant", "authorId": 3, "id": 51, "likes": 487, "popularity": 0.01, "reads": 98798, "tags": ["design", "startups", "tech"]}, {"author": "Elisha Friedman", "authorId": 8, "id": 56, "likes": 319, "popularity": 0.49, "reads": 96864, "tags": ["design", "health", "culture"]}, {"author": "Zackery Turner", "authorId": 12, "id": 63, "likes": 682, "popularity": 0.62, "reads": 54374, "tags": ["culture", "design"]}, {"author": "Rylee Paul", "authorId": 9, "id": 73, "likes": 315, "popularity": 0.13, "reads": 8966, "tags": ["design"]}, {"author": "Kinley Crosby", "authorId": 10, "id": 75, "likes": 733, "popularity": 0.98, "reads": 94910, "tags": ["science", "design", "culture"]}, {"author": "Bryson Bowers", "authorId": 6, "id": 81, "likes": 552, "popularity": 0.09, "reads": 22975, "tags": ["design", "history"]}, {"author": "Lainey Ritter", "authorId": 1, "id": 97, "likes": 382, "popularity": 0.83, "reads": 47484, "tags": ["politics", "science", "design", "culture"]}, {"author": "Tia Roberson", "authorId": 2, "id": 98, "likes": 934, "popularity": 0.5, "reads": 17307, "tags": ["design"]}, {"author": "Ahmad Dunn", "authorId": 7, "id": 100, "likes": 573, "popularity": 0.43, "reads": 89894, "tags": ["science", "design", "history"]}]}
    assert expected == json.loads(res.get_data(as_text=True))